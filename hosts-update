#!/usr/bin/env bash
# Author:
#  Héctor Molinero Fernández <me@znt.se>.
#  https://github.com/zant95/hosts-update


# Exit on errors:
set -eu
set -o pipefail

# Configuration:
DST_HOSTS='/etc/hosts'
DST_IP='0.0.0.0'
HEADER_FILE=~/.config/hosts-update/hosts-header.txt
if test -r "$HEADER_FILE"; then
	# read header from file
	HEADER=$(cat "$HEADER_FILE")
else
	HEADER="
127.0.0.1       localhost $(uname -n)
255.255.255.255 broadcasthost
::1             localhost ip6-localhost ip6-loopback
fe00::0         ip6-localnet
ff00::0         ip6-mcastprefix
ff02::1         ip6-allnodes
ff02::2         ip6-allrouters
ff02::3         ip6-allhosts
"
fi

SOURCES=(
	'http://adaway.org/hosts.txt'
	'http://hosts-file.net/ad_servers.txt'
	'http://malwaredomains.lehigh.edu/files/justdomains'
	'http://pgl.yoyo.org/adservers/serverlist.php?hostformat=nohtml&mimetype=plaintext'
	'http://someonewhocares.org/hosts/hosts'
	'http://winhelp2002.mvps.org/hosts.txt'
	'http://www.malwaredomainlist.com/hostslist/hosts.txt'
)
WHITELIST=(
# Regex examples:
#   '\.com$' -> all domains that ends with '.com'.
#   '^example' -> all domains that starts whith 'example'.
#   '^sub\.example\.org$' -> literal domain 'sub.example.org'.
	'^whitelistdomain1\.example$'
	'^whitelistdomain2\.example$'
)
BLACKLIST=(
# Literal string, no regex.
	'blacklistdomain.example'
)

# Messages:
actionMsg() {
	printf '\e[1;33m + \e[1;32m%s \e[0m\n' "$@"
}
infoMsg() {
	printf '   - %s\n' "$@"
}
errorMsg() {
	printf '\e[1;33m + \e[1;31m%s \e[0m\n' "$@"
}
promptMsg() {
	if [ "$FLAG" = 'yes' ]; then
		return 0
	elif [ "$FLAG" = 'no' ]; then
		return 1
	fi

	printf '\e[1;33m + \e[1;32m%s \e[0m' "$@"
	read -p '[y/N]: ' USER_RESPONSE < /dev/tty
	if [[ ${USER_RESPONSE^^} =~ ^(Y|YES)$ ]]; then
		return 0
	else
		return 1
	fi
}

# Flag:
USE_DIFF=0
DIFF_TOOL=vimdiff
if [ $# -ge 1 ] && [[ "$1" == "diff" ]]; then
	shift
	actionMsg "Using $DIFF_TOOL"
	USE_DIFF=1
fi
FLAG=''
if [ $# -eq 1 ]; then
	FLAG="$1"
fi

# Process begins:
actionMsg 'Configuration:'
	infoMsg "Hosts location: $DST_HOSTS"
	infoMsg "Destination IP: $DST_IP"

BLOCKLIST=''

actionMsg 'Downloading lists...'
	for URL in "${SOURCES[@]}"; do
		infoMsg "$URL"
		CONTENT=$(curl -fsSL --connect-timeout 40 --max-time 120 "$URL") || true

		# Inform user if the download fails
		if [[ -z "$CONTENT" ]]; then
			errorMsg 'Error downloading list'
			if ! promptMsg 'Do you want to continue?'; then
				exit 0
			fi
		fi

		BLOCKLIST=$(printf '%s\n%s\n' "$BLOCKLIST" "$CONTENT")
		unset CONTENT
	done

actionMsg 'Parsing lists...'
	infoMsg 'Change EOL to Unix format'
		BLOCKLIST=$(printf '%s\n' "$BLOCKLIST" | sed 's/^M$//')

	infoMsg 'Select only hosts lines'
		IP_REGEX='([0-9]{1,3}\.){3}[0-9]{1,3}[[:blank:]]+'
		DOMAIN_REGEX='([[:alnum:]_-]{1,63}\.)+[[:alpha:]][[:alnum:]_-]{1,62}'
		BLOCKLIST=$(printf '%s\n' "$BLOCKLIST" | grep -oE "(^($IP_REGEX)|^)$DOMAIN_REGEX")

	infoMsg 'Remove old destination'
		BLOCKLIST=$(printf '%s\n' "$BLOCKLIST" | sed -r "s/^$IP_REGEX//g")

	infoMsg 'Transform all entries to lowercase'
		BLOCKLIST=$(printf '%s\n' "$BLOCKLIST" | awk '{print tolower($0)}')

	infoMsg 'Remove local entries'
		LOCAL_REGEX='(localhost|localhost\.localdomain|local|broadcasthost)'
		BLOCKLIST=$(printf '%s\n' "$BLOCKLIST" | sed -r "/^$LOCAL_REGEX$/d")

	infoMsg 'Apply whitelist'
		if [ ${#WHITELIST[@]} -gt 0 ]; then
			for DOMAIN in "${WHITELIST[@]}"; do
				BLOCKLIST=$(printf '%s\n' "$BLOCKLIST" | sed -r "/$DOMAIN/d")
			done
		fi

	infoMsg 'Apply blacklist'
		if [ ${#BLACKLIST[@]} -gt 0 ]; then
			for DOMAIN in "${BLACKLIST[@]}"; do
				BLOCKLIST=$(printf '%s\n%s\n' "$BLOCKLIST" "$DOMAIN")
			done
		fi

	infoMsg 'Remove duplicate entries'
		BLOCKLIST=$(printf '%s\n' "$BLOCKLIST" | awk '!a[$0]++')

	infoMsg 'Sort entries'
		BLOCKLIST=$(printf '%s\n' "$BLOCKLIST" | sort -n)

	infoMsg 'Add new destination'
		BLOCKLIST=$(printf '%s\n' "$BLOCKLIST" | sed "s/^/$DST_IP /g")

	actionMsg 'Generating hosts file...'
		HEADER=$(printf '# <header>%s# </header>\n' "$HEADER")
		HEADER=$(printf '# %s\n%s\n' "$(date)" "$HEADER")
		HOSTS=$(printf '%s\n# <blocklist>\n%s\n# </blocklist>' "$HEADER" "$BLOCKLIST")

if [ $USE_DIFF -eq 1 ]; then
	# Diff new file with current hosts file
	temp=$(tempfile)
	printf '%s\n' "$HOSTS" > $temp
	if [ $EUID -ne 0 ]; then
		sudo $DIFF_TOOL $temp "$DST_HOSTS"
	else
		$DIFF_TOOL $temp "$DST_HOSTS"
	fi
	rm -f $temp
else
	# Write to disk:
	if [ $EUID -ne 0 ]; then
		printf '%s\n' "$HOSTS" | sudo tee "$DST_HOSTS" > /dev/null
	else
		printf '%s\n' "$HOSTS" | tee "$DST_HOSTS" > /dev/null
	fi
fi

actionMsg "$(printf '%s\n' "$BLOCKLIST" | wc -l) hosts added!"
